---
title: "Analysis of UAC data"
output:
  bookdown::html_document2:
    css: .formatting/grattan-style.css
    theme: lumen
    highlight: pygments
    toc: yes
    toc_depth: 2
    toc_float: no
    number_sections: yes
    df_print: kable
---

```{r logo, echo=FALSE}
# This adds the grattan logo to the document (cute)
htmltools::img(src = knitr::image_uri(file.path(".formatting", "logo", "GrattanLogo_left.png")), 
               alt = 'logo', 
               style = 'position:absolute; top:0; right:0; padding:10px; height:8%;')
```


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE, 
                      message = FALSE)

source("R/00-setup.R") 

rebuild_data <- FALSE
```

# Import data

```{r}

#Upload the !!Preliminary!! course list provided to Grattan. 
#Note - UAC subsequently filtered that down, in the data set ultimately provided to us, using filters: field of study code (broad FOS = 7) or any course with description including the string “Educat” or “Teach”. 

user_data_folder <- "C:/Users/PETRIE/The University of Melbourne/2024 Primary schools maths - General/3. Data/4. Uni entry data/"
#"C:/Users/parkinsonn/The University of Melbourne/2024 Primary schools maths - General/3. Data/4. Uni entry data/"

file_path_course_information <- glue(user_data_folder, "UAC courses reference data - ua15 to ua24.xlsx")

data_frame_course_information <- file_path_course_information |> 
  excel_sheets()
  
data_frame_course_information <-  data_frame_course_information %>% 
  set_names() |> 
  map(read_excel, path = file_path_course_information) |> 
  list_rbind()

file_path_school_leaver_results <- glue(user_data_folder, "UAC data for Grattan Institute - 2015 to 2024.xlsx")

data_frame_school_leaver_results <- file_path_school_leaver_results |> 
  excel_sheets() |> 
  setdiff("Notes") |> 
  set_names() |> 
  map(read_excel, path = file_path_school_leaver_results, col_types = "text") |> 
  list_rbind()

```

## List of degrees

```{r}

# From the course description
search_terms1 <- "^7"
search_terms2 <- c("educat|teach")

data_frame_course_information <- 
  data_frame_course_information |> 
  mutate(teaching_degree = 
           if_else(
             grepl(search_terms1,
                   field_of_study,
                   ignore.case = TRUE
           ), 
           T, 
              if_else(grepl(search_terms2,
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F)
           )
  )

course_names <- 
  filter(data_frame_course_information, 
       teaching_degree) |> 
  pull(course_desc_short) |> 
  unique()

write.csv(course_names, glue(user_data_folder, "UAC_course_names.csv"))

# From the teacher data
enrolled_counts <- 
  data_frame_school_leaver_results |> 
  filter(enrolment_status == "E") |> 
  count(course_desc_short) |> 
  arrange(-n)

#identify courses with primary, secondary, special or specialist, or distance in the title

#There's probably a way to use map here, even with the boolean language. Come to that later. ChatGPT strucggling to do it without using across() and throwing up errors.
enrolled_counts <- enrolled_counts |>
  mutate(
    primary = if_else(grepl("primary",
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F),
    secondary = if_else(grepl("secondary",
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F),
    special = if_else(grepl("special",
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F),
    distance = if_else(grepl("distance",
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F),
    ece =  if_else(grepl(c("early|child|kinder"),
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F),
    bachelor =  if_else(grepl(c("bachelor"),
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F),
    diploma =  if_else(grepl(c("diploma|dip"),
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F),
    master =  if_else(grepl(c("master"),
                   course_desc_short,
                   ignore.case = TRUE
              ), 
              T, 
              F)
  )

write.csv(enrolled_counts, glue(user_data_folder, "UAC_course_by_enrolment.csv"))

enrolled_counts |> count(primary, secondary, ece, special, distance, master)

#setdiff(course_names, enrolled_counts$course_desc_short)

```

#Overall enrolments by year

```{r}
#Count number of enrolled students in each year
#May need to re-read in enrolemnts sheet edited in excel, with irrelevant courses removed
data_frame_school_leaver_results |> 
  filter(enrolment_status == "E") |> 
  count(hsc_year) |> 
  plot()

```

# Participation

```{r}
data_frame_school_leaver_results |> 
  # Need to filter just for primary
  # Need to compare to general population
  filter(enrolment_status == "E") |> 
  select(ends_with("band")) |> 
  summarise(across(everything(), ~sum(!is.na(.))/n()))

```

